<script lang="ts">
  import { onMount } from 'svelte';
  import { goto } from '$app/navigation';
  import { supabase } from '$lib/supabaseClient';
  import { Mail, Check } from 'lucide-svelte';
  import Button from '$lib/components/Button.svelte';
  
  // State variables
  let email = '';
  let error = '';
  let loading = false;
  let linkSent = false;
  let processingAuth = false;
  let authError = '';
  let finalRedirectTo = '/dashboard'; // Default redirect destination
  
  // Process the authentication token if it exists in the URL hash
  onMount(async () => {
    // Check for redirectTo query parameter from the server redirect or initial navigation
    const queryParams = new URLSearchParams(window.location.search);
    const serverRedirectTo = queryParams.get('redirectTo');
    
    if (serverRedirectTo) {
      finalRedirectTo = serverRedirectTo;
      console.log('Login page: Final redirect destination set to:', finalRedirectTo);
    }
    
    const hash = window.location.hash;
    console.log('URL hash detected:', hash ? 'Yes' : 'No');
    
    if (hash) {
      processingAuth = true;
      console.log('Processing authentication from URL hash');
      
      try {
        // Extract access token from the URL hash
        const params = new URLSearchParams(hash.substring(1));
        const accessToken = params.get('access_token');
        const refreshToken = params.get('refresh_token');
        
        if (accessToken) {
          console.log('Access token found, setting session');
          
          // Set the session using the token from the URL
          const { error: authError } = await supabase.auth.setSession({
            access_token: accessToken,
            refresh_token: refreshToken || ''
          });
          
          if (authError) {
            console.error('Error setting session:', authError);
            throw authError;
          }
          
          // Clear the hash and redirect to the final destination
          if (window.history && window.history.replaceState) {
            const url = new URL(window.location.href);
            url.hash = '';
            url.searchParams.delete('redirectTo');
            window.history.replaceState({}, document.title, url.toString());
          }
          
          // Redirect to the final destination
          goto(finalRedirectTo);
        } else {
          throw new Error('No access token found in URL');
        }
      } catch (err) {
        console.error('Error processing authentication:', err);
        authError = err instanceof Error ? err.message : 'Authentication failed';
      } finally {
        processingAuth = false;
      }
    }
  });
  
  // Handle magic link authentication
  async function handleAuth() {
    if (!email) {
      error = 'Please enter your email';
      return;
    }
    
    error = '';
    loading = true;
    
    try {
      console.log('Sending magic link to:', email);
      console.log('Redirect after login:', finalRedirectTo);
      
      // Call the server-side API to send the magic link
      const response = await fetch(`/api/auth/magic-link?redirectTo=${encodeURIComponent(finalRedirectTo)}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ email })
      });
      
      const result = await response.json();
      
      if (!response.ok || !result.success) {
        const errorMessage = result.error || 'Failed to send magic link. Please try again.';
        throw new Error(errorMessage);
      }
      
      // Show success message
      linkSent = true;
    } catch (err) {
      console.error('Error sending magic link:', err);
      error = err instanceof Error ? err.message : 'An unexpected error occurred';
    } finally {
      loading = false;
    }
  }
  
  // Reset the form
  function resetForm() {
    email = '';
    linkSent = false;
    error = '';
  }
                    console.log('Method 3 - Extracted access token from URL:', accessToken.substring(0, 20) + '...');
                  }
                  if (part.startsWith('refresh_token=')) {
                    refreshToken = part.split('=')[1];
                  }
                }
              }
            }
          } catch (e) {
            console.log('Error extracting token from URL:', e);
          }
        }
        
        console.log('Final access token found:', accessToken ? 'Yes' : 'No');
        
        if (accessToken) {
          console.log('Access token found, setting session');
          
          // Set the auth session using the token from the URL
          const { error } = await supabase.auth.setSession({
            access_token: accessToken,
            refresh_token: refreshToken || ''
          });
          
          if (error) {
            console.error('Error setting session:', error);
            throw new Error(error.message);
          }
          
          // Verify the session was actually set by checking the current session
          const { data: { session } } = await supabase.auth.getSession();
          console.log('Session after setting:', session ? 'Valid session' : 'No session');
          
          if (!session) {
            console.error('Failed to establish session after setting tokens');
            throw new Error('Authentication failed: Could not establish session');
          }
          
          // Get the redirect URL from the query parameters or default to dashboard
          const urlParams = new URLSearchParams(window.location.search);
          console.log('Authentication successful, redirecting to:', finalRedirectTo);
          
          // Clear the hash from the URL and remove the redirectTo query param if it was only for this step
          if (window.history && window.history.replaceState) {
            const currentPath = window.location.pathname;
            const searchParams = new URLSearchParams(window.location.search);
            searchParams.delete('redirectTo'); // Remove redirectTo after use
            const newSearch = searchParams.toString();
            window.history.replaceState(null, document.title, currentPath + (newSearch ? `?${newSearch}` : ''));
          }
          
          // Redirect to the final destination
          goto(finalRedirectTo);
        } else {
          throw new Error('No access token found in URL');
        }
      } catch (err) {
        console.error('Error processing authentication:', err);
        authError = err instanceof Error ? err.message : 'Authentication failed';
        processingAuth = false;
      }
    }
  });

  let email = '';
  let password = '';
  let error = '';
  let mode = 'login'; // or 'signup'
  let showResetModal = false;
  let resetEmail = '';
  let resetStatus = '';
  let resetLoading = false;
  let loading = false;
  let step = 'enter-email'; // or 'verify-code'
  let otpCode = '';
  let linkSent = false;

  const bgX = tweened(0, { duration: 100, easing: cubicInOut});

 // Watch mode and animate
  $: if (mode === 'login') {
    bgX.set(0); // login is on the left
  } else {
    bgX.set(100); // signup is on the right (percent-based)
  }

  async function handleAuth() {
    error = '';
    if (!email) {
      error = 'Please enter your email.';
      return;
    }

    loading = true;
    
    try {
      // Debug logs
      console.log('Starting magic link authentication');
      console.log('Current origin:', window.location.origin);
      
      // Determine the final redirect URL. If the current URL has a 'redirectTo' param, preserve it for the magic link API call.
      const currentUrlParams = new URLSearchParams(window.location.search);
      const redirectToParamForApi = currentUrlParams.get('redirectTo') || finalRedirectTo;
      
      console.log('Sending magic link to:', email);
      console.log('Redirect after login:', redirectToParamForApi);
      
      // Call the server-side API to send the magic link
      const response = await fetch(`/api/auth/magic-link?redirectTo=${encodeURIComponent(redirectToParamForApi)}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ email })
      });
      
      const result = await response.json();
      console.log('Magic link API response:', result);
      
      if (!response.ok || !result.success) {
        const errorMessage = result.error || 'Failed to send magic link. Please try again.';
        console.error('Magic link error:', errorMessage);
        error = errorMessage;
      } else {
        console.log('Magic link sent successfully');
        linkSent = true;
        step = 'link-sent';
      }
    } catch (e) {
      console.error('Exception during magic link auth:', e);
      error = 'An unexpected error occurred. Please try again.';
    } finally {
      loading = false;
    }
  }

  async function verifyOtp() {
    try {
      // Verify OTP logic here
      console.log('OTP verification successful, redirecting to dashboard');
      goto('/dashboard');
    } catch (e) {
      console.error('Exception during OTP verification:', e);
      loading = false;
      error = 'An unexpected error occurred during verification.';
    }
  }

  async function sendReset() {
    loading = true;
    error = '';
    
    try {
      const { error: resetError } = await supabase.auth.resetPasswordForEmail(resetEmail);
      
      if (resetError) {
        console.error('Password reset error:', resetError);
        error = resetError.message;
      } else {
        console.log('Password reset email sent to:', resetEmail);
        error = '✅ Reset email sent. Check your inbox.';
      }
    } catch (e) {
      console.error('Exception during password reset:', e);
      error = 'An unexpected error occurred. Please try again.';
    } finally {
      loading = false;
    }
  }
}

function resetToStart() {
  email = '';
  linkSent = false;
  error = '';
  step = 'enter-email';
}


</script>

<div class="login-page">

  <svg width="0" height="0">
  <linearGradient id="magic" x1="0" y1="0" x2="1" y2="1">
    <stop offset="0%" stop-color="#689ef9" />
    <stop offset="100%" stop-color="#6e4ef4" />
  </linearGradient>
</svg>

  <img src="/logos/ldrb-logo-colourlight.svg" alt="ldrboard logo" class="logo fade-in-up" />
  <div class="login-card fade-in-up delay-200">
  
    {#if processingAuth}
      <div class="auth-processing">
        <div class="spinner"></div>
        <p>Processing authentication...</p>
      </div>
    {:else if authError}
      <div class="auth-error">
        <p>Authentication Error:</p>
        <p class="error-message">{authError}</p>
        <Button on:click={() => authError = ''}>Try Again</Button>
      </div>
    {:else}
      {#if step === 'enter-email' && !linkSent}
        <div class="login-tabs" role="tablist" aria-label="Login options">
          <div class="bg-slide {mode === 'login' ? 'left-radius' : 'right-radius'}"
               style="transform: translateX({$bgX}%);"></div>
          <button 
            type="button"
            class="tab" 
            class:active={mode === 'login'} 
            on:click={() => mode = 'login'}
            on:keydown={e => e.key === 'Enter' && (mode = 'login')}
            role="tab"
            aria-selected={mode === 'login'}
            tabindex={mode === 'login' ? 0 : -1}
          >Log-In</button>
          <button 
            type="button"
            class="tab" 
            class:active={mode === 'signup'} 
            on:click={() => mode = 'signup'}
            on:keydown={e => e.key === 'Enter' && (mode = 'signup')}
            role="tab"
            aria-selected={mode === 'signup'}
            tabindex={mode === 'signup' ? 0 : -1}
          >Sign-Up</button>
        </div>

        <form class="login-form" on:submit|preventDefault={handleAuth}>
          <label for="email-input">Email</label>
          <input id="email-input" type="email" bind:value={email} placeholder="you@example.com" required />
          <Button type="submit" disabled={loading}>
            {#if loading}
              Sending...
            {:else}
              Send Magic Link <ArrowRight size="16" style="margin-left: 0.5rem;" />
            {/if}
          </Button>
        </form>

        <button 
          type="button" 
          class="forgot-link" 
          on:click={() => step = 'forgot-password'}
          on:keydown={e => e.key === 'Enter' && (step = 'forgot-password')}
        >
          Forgot Password?
        </button>
      {/if}

      {#if step === 'forgot-password'}
        <form class="forgot-password" on:submit|preventDefault={sendReset}>
          <h2>🔐 Reset your password</h2>
          <label for="reset-email-input" class="sr-only">Email</label>
          <input id="reset-email-input" type="email" bind:value={resetEmail} placeholder="Enter your email" />
          <Button type="submit">{loading ? 'Sending...' : 'Send Reset Link'}</Button>
          <button 
            type="button" 
            class="resend-text" 
            on:click={() => step = 'enter-email'}
            on:keydown={e => e.key === 'Enter' && (step = 'enter-email')}
          >
            ← Back to login
          </button>
        </form>
      {/if}

      {#if linkSent}
        <div class="link-sent-view">
          <button class="retry-icon" on:click={resetToStart} title="Start Over">
            <RotateCcw size="24" />
          </button>

          <Mail size="64" stroke-width="1.8" color="url(#magic)" />
          <h2>Magic Link Sent!</h2>
          <p>We've sent a login link to <strong>{email}</strong></p>
          <p>Click the link in your email to log in.</p>
          <Button on:click={handleAuth} disabled={loading}>
            {#if loading} Resending... {:else} Resend Magic Link {/if}
          </Button>
        </div>
      {/if}
      
      {#if error && (step === 'enter-email' || step === 'forgot-password')}
        <p class="error-message global-error">{error}</p>
      {/if}
    {/if}
  </div>

  <footer>© 2025 Club Green</footer>
</div>

<style>
  .global-error {
    margin-top: 1rem;
    text-align: center;
    color: var(--danger-color, red); /* Ensure --danger-color is defined or use a fallback */
  }
</style>


